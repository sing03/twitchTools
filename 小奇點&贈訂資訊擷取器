<!DOCTYPE html>
<html lang="zh-Hant">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Twitch 小奇點 &amp; 贈訂 資訊擷取器</title>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
<style>
  /* Reset & base */
  *, *::before, *::after {
    box-sizing: border-box;
  }
  body {
    margin: 0; font-family: 'Inter', 'Noto Sans TC', sans-serif;
    background: linear-gradient(135deg, #1e1967 0%, #2e2a85 90%);
    color: #e0e0e0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  a {
    color: inherit; text-decoration: none;
  }
  /* Scrollbar */
  ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }
  ::-webkit-scrollbar-track {
    background: #2a2672;
    border-radius: 8px;
  }
  ::-webkit-scrollbar-thumb {
    background: #5a57b9;
    border-radius: 8px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: #423ea5;
  }
  /* Header */
  header {
    position: sticky;
    top: 0;
    height: 64px;
    backdrop-filter: blur(20px);
    background: rgba(36, 33, 94, 0.65);
    box-shadow: 0 2px 12px rgb(20 16 65 / 0.7);
    display: flex;
    align-items: center;
    padding: 0 24px;
    z-index: 101;
  }
  header .brand {
    font-weight: 900;
    font-size: clamp(1.25rem, 1.5vw, 1.75rem);
    letter-spacing: 0.08em;
    background: linear-gradient(45deg, #9f7aea, #38bdf8);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    user-select: none;
  }
  header .header-controls {
    margin-left: auto;
    display: flex;
    align-items: center;
    gap: 12px;
  }
  header .header-controls button {
    background: transparent;
    border: none;
    color: #cbd5e1;
    cursor: pointer;
    font-size: 24px;
    padding: 6px;
    border-radius: 12px;
    transition: background-color 0.3s ease;
  }
  header .header-controls button:hover,
  header .header-controls button:focus {
    background: rgba(255 255 255 / 0.12);
    outline: none;
  }

  /* Layout */
  #app {
    display: flex;
    flex: 1 1 auto;
    min-height: calc(100vh - 64px);
    overflow: hidden;
  }
  /* Sidebar */
  nav.sidebar {
    width: 280px;
    min-width: 280px;
    background: rgba(40,36,105,0.9);
    backdrop-filter: blur(24px);
    border-right: 1px solid rgba(79,70,229,0.3);
    display: flex;
    flex-direction: column;
    padding-top: 20px;
    color: #d6d8db;
    transition: transform 0.3s ease;
    z-index: 200;
  }
  nav.sidebar h2 {
    text-align: center;
    font-size: 1.4rem;
    font-weight: 700;
    margin-bottom: 32px;
    letter-spacing: 0.08em;
    user-select: none;
    color: #ddd6fe;
  }
  nav.sidebar ul {
    list-style: none;
    padding: 0 12px;
    margin: 0;
    flex: 1;
    overflow-y: auto;
  }
  nav.sidebar ul li {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    margin-bottom: 6px;
    border-radius: 10px;
    cursor: pointer;
    gap: 16px;
    font-weight: 600;
    font-size: 1.05rem;
    color: #c4c4ff;
    user-select: none;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  nav.sidebar ul li:hover,
  nav.sidebar ul li.active {
    background: linear-gradient(135deg, #8b5cf6eb, #06b6d4);
    color: #fff;
  }
  nav.sidebar ul li .material-icons {
    font-size: 24px;
    flex-shrink: 0;
  }
  nav.sidebar ul li .badge {
    background: #d946ef;
    border-radius: 16px;
    padding: 2px 10px;
    font-weight: 700;
    font-size: 0.75rem;
    color: #fff;
    user-select: none;
  }
  /* Mobile Sidebar Hidden */
  nav.sidebar.mobile-hidden {
    transform: translateX(-100%);
    position: fixed;
    top: 64px;
    bottom: 0;
    left: 0;
    width: 280px;
    box-shadow: 4px 0 12px rgb(20 16 65 / 0.7);
  }

  /* Overlay for mobile menu */
  #overlay {
    position: fixed;
    inset: 0;
    background: rgba(10, 10, 30, 0.5);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
    z-index: 150;
  }
  #overlay.show {
    opacity: 1;
    pointer-events: all;
  }

  /* Main Content */
  main.content {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 24px 32px;
    overflow-y: auto;
  }
  main.content h1 {
    font-weight: 800;
    font-size: clamp(1.5rem, 3vw, 2.5rem);
    margin-bottom: 16px;
    color: #c7d2fe;
    user-select: none;
  }
  main.content .input-group {
    max-width: 480px;
    margin-bottom: 24px;
  }
  main.content label {
    display: block;
    margin-bottom: 6px;
    font-weight: 600;
    color: #b9bbd6;
  }
  main.content input[type="text"],
  main.content input[type="password"],
  main.content input[type="url"],
  main.content input[type="email"] {
    width: 100%;
    padding: 12px 16px;
    border-radius: 12px;
    border: none;
    font-size: 1rem;
    background: rgba(255 255 255 / 0.06);
    color: #d1d5db;
    transition: background-color 0.3s ease;
  }
  main.content input[type="text"]:focus,
  main.content input[type="password"]:focus,
  main.content input[type="url"]:focus,
  main.content input[type="email"]:focus {
    background: rgba(255 255 255 / 0.12);
    outline: none;
  }
  main.content button.connect-btn,
  main.content button.export-btn {
    margin-top: 12px;
    background: linear-gradient(135deg, #8b5cf6, #06b6d4);
    border: none;
    color: white;
    font-weight: 700;
    cursor: pointer;
    padding: 12px 28px;
    font-size: 1rem;
    border-radius: 14px;
    box-shadow: 0 8px 20px rgb(8 27 59 / 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    user-select: none;
  }
  main.content button.connect-btn:hover:enabled,
  main.content button.export-btn:hover:enabled {
    transform: translateY(-2px);
    box-shadow: 0 12px 28px rgb(46 105 248 / 0.5);
  }
  main.content button.connect-btn:disabled,
  main.content button.export-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  .btn-group {
    margin-bottom: 16px;
    display: flex;
    gap: 16px;
  }
  /* Data table */
  table.event-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 12px;
    font-size: 0.95rem;
  }
  table.event-table thead th {
    text-align: left;
    font-weight: 700;
    padding: 12px 16px;
    color: #a5b4fc;
    user-select: none;
  }
  table.event-table tbody tr {
    background: rgba(255 255 255 / 0.06);
    border-radius: 12px;
    transition: background-color 0.3s ease;
  }
  table.event-table tbody tr:hover {
    background: rgba(139, 92, 246, 0.25);
  }
  table.event-table tbody td {
    padding: 12px 16px;
    border-top: 1px solid transparent;
    color: #dde1f7;
    vertical-align: middle;
  }
  table.event-table tbody td > .user-name {
    font-weight: 600;
    max-width: 150px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  table.event-table tbody td .material-icons {
    vertical-align: middle;
    font-size: 20px;
    margin-right: 4px;
    color: #a78bfa;
  }
  /* Scroll container for table */
  .table-wrapper {
    overflow-x: auto;
    padding-bottom: 12px;
  }

  /* Modal */
  .modal-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(20, 20, 70, 0.9);
    backdrop-filter: blur(8px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 5000;
  }
  .modal {
    background: rgba(30, 30, 80, 0.95);
    border-radius: 16px;
    width: 90%;
    max-width: 420px;
    padding: 24px;
    box-shadow: 0 10px 40px rgba(40,60,120,0.6);
    color: #d1d5db;
    font-size: 0.95rem;
  }
  .modal h3 {
    margin-top: 0;
    font-weight: 800;
    margin-bottom: 16px;
    color: #c7d2fe;
  }
  .modal label {
    display: block;
    margin-bottom: 6px;
    font-weight: 600;
  }
  .modal input[type="text"],
  .modal input[type="password"] {
    width: 100%;
    padding: 10px 14px;
    border-radius: 10px;
    border: none;
    font-size: 1rem;
    background: rgba(255 255 255 / 0.10);
    color: #e0e7ff;
    margin-bottom: 16px;
    transition: background-color 0.3s ease;
  }
  .modal input[type="text"]:focus,
  .modal input[type="password"]:focus {
    background: rgba(255 255 255 / 0.2);
    outline: none;
  }
  .modal-footer {
    text-align: right;
  }
  .modal-footer button {
    margin-left: 12px;
    background: linear-gradient(135deg, #8b5cf6, #06b6d4);
    border: none;
    color: white;
    font-weight: 700;
    cursor: pointer;
    padding: 10px 24px;
    font-size: 1rem;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgb(8 27 59 / 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .modal-footer button:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 28px rgb(46 105 248 / 0.5);
  }
  .modal-footer button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  /* Toast Notifications */
  #toast-container {
    position: fixed;
    bottom: 40px;
    right: 40px;
    max-width: 320px;
    z-index: 9999;
  }
  .toast {
    background: rgba(10, 10, 30, 0.9);
    padding: 14px 20px;
    border-radius: 14px;
    margin-top: 10px;
    color: #e0e7ff;
    box-shadow: 0 4px 20px rgb(86 89 138 / 0.7);
    display: flex;
    align-items: center;
    gap: 16px;
    opacity: 0;
    transform: translateX(100%);
    animation: slideInToast 0.3s forwards;
    font-weight: 600;
  }
  .toast-icon {
    font-size: 24px;
    color: #a78bfa;
    flex-shrink: 0;
  }
  @keyframes slideInToast {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  /* Footer */
  footer {
    background: rgba(31, 30, 79, 0.8);
    backdrop-filter: blur(16px);
    color: #acb2f0;
    font-size: 0.85rem;
    text-align: center;
    padding: 12px 16px;
    user-select: none;
  }
  /* Responsive */
  @media (max-width: 1023px) {
    nav.sidebar {
      position: fixed;
      top: 64px;
      left: 0;
      bottom: 0;
      transform: translateX(-100%);
      width: 280px;
      z-index: 20;
      box-shadow: 4px 0 12px rgba(20,16,65,0.7);
    }
    nav.sidebar.mobile-visible {
      transform: translateX(0);
      transition: transform 0.3s ease;
    }
    #app {
      padding-left: 0;
    }
  }
  @media (max-width: 639px) {
    header {
      padding: 0 16px;
    }
    main.content {
      padding: 16px 20px;
    }
    table.event-table {
      font-size: 0.8rem;
    }
    table.event-table thead th,
    table.event-table tbody td {
      padding: 8px 10px;
    }
    nav.sidebar ul li {
      padding: 9px 12px;
      font-size: 0.9rem;
    }
  }
</style>
</head>
<body>
<header role="banner" aria-label="主選單區">
  <div class="brand" tabindex="0">Twitch Bits &amp; 贈訂 情報站</div>
  <div class="header-controls">
    <button id="menu-toggle" aria-label="切換選單" title="切換選單" aria-expanded="false" aria-controls="sidebar">
      <span class="material-icons">menu</span>
    </button>
    <button id="theme-toggle" aria-label="切換主題" title="切換主題" aria-pressed="false">
      <span class="material-icons" id="theme-icon">dark_mode</span>
    </button>
  </div>
</header>
<div id="app">
  <nav class="sidebar" id="sidebar" aria-label="主要導航">
    <h2 tabindex="0">事件分類</h2>
    <ul>
      <li class="active" data-type="all" tabindex="0" role="button" aria-pressed="true" aria-label="顯示所有事件">
        <span class="material-icons">view_stream</span>全部事件 <span class="badge" id="badge-all">0</span>
      </li>
      <li data-type="bits" tabindex="0" role="button" aria-pressed="false" aria-label="顯示小奇點贊助事件">
        <span class="material-icons">local_play</span>小奇點 (Bits) <span class="badge" id="badge-bits">0</span>
      </li>
      <li data-type="gift" tabindex="0" role="button" aria-pressed="false" aria-label="顯示贈訂事件">
        <span class="material-icons">card_giftcard</span>贈送訂閱 <span class="badge" id="badge-gift">0</span>
      </li>
    </ul>
  </nav>
  <main class="content" role="main">
    <h1 tabindex="0">Twitch Bits 與 贈訂擷取</h1>
    <section aria-label="頻道設定區" class="input-group">
      <label for="channelName">輸入要觀察的 Twitch 頻道ID：</label>
      <input type="text" id="channelName" placeholder="例如：ninja" aria-describedby="channelHelp" autocomplete="off" />
      <button class="connect-btn" id="connectBtn" disabled>連線 Twitch IRC</button>
      <small id="channelHelp">輸入正確的頻道ID以擷取聊天室事件。</small>
    </section>
    <section aria-label="匯出功能" class="btn-group" style="user-select:none;">
      <button class="export-btn" id="exportCsvBtn" aria-label="下載 CSV 檔案">下載 CSV 檔案</button>
      <button class="export-btn" id="openGoogleSheetModalBtn" aria-label="儲存至 Google 試算表">儲存至 Google 試算表</button>
    </section>
    <section aria-label="事件列表" class="table-wrapper" tabindex="0">
        <table class="event-table" role="grid" aria-live="polite" aria-relevant="all">
          <thead>
            <tr>
              <th scope="col" style="width: 160px;">時間</th>
              <th scope="col" style="width: 220px;">觀眾帳號</th>
              <th scope="col" style="width: 220px;">顯示名稱</th>
              <th scope="col" style="width: 300px;">類型</th>
              <th scope="col" style="width: 160px;">數量</th>
            </tr>
          </thead>
          <tbody id="eventTableBody">
            <!-- 動態項目 -->
          </tbody>
        </table>
    </section>
  </main>
</div>
<div id="overlay" tabindex="-1"></div>
<div id="toast-container" aria-live="assertive" aria-atomic="true"></div>
<footer role="contentinfo">
  © 2024 Twitch 小奇點與贈訂擷取器 | 開發者: BLACKBOXAI 版權所有
</footer>

<!-- Google Sheets modal -->
<div id="googleSheetModal" class="modal-backdrop" role="dialog" aria-modal="true" aria-labelledby="modalTitle" style="display: none;">
  <div class="modal">
    <h3 id="modalTitle">儲存到 Google 試算表</h3>
    <label for="gapiApiKey">Google API Key:</label>
    <input type="text" id="gapiApiKey" placeholder="輸入您的 Google API Key" autocomplete="off" />

    <label for="googleSheetId">試算表 ID:</label>
    <input type="text" id="googleSheetId" placeholder="輸入 Google 試算表 ID" autocomplete="off" />

    <p style="font-size:0.9rem; color:#c4b5fd; margin-bottom:16px;">
      請先確保您的 Google 試算表已開啟「任何擁有連結的人都可以編輯」權限，<br />
      並且已在 Google Cloud Console 啟用 Sheets API 獲取 API Key。
    </p>
    <div class="modal-footer">
      <button id="cancelGoogleSheetBtn" type="button">取消</button>
      <button id="saveGoogleSheetBtn" type="button" disabled>儲存</button>
    </div>
  </div>
</div>

<script>
(() => {
  'use strict';

  // Utility: format date/time
  function formatDateTime(date) {
    return date.toLocaleString(undefined, {
      hour12: false,
      year: 'numeric', month: '2-digit', day: '2-digit',
      hour: '2-digit', minute: '2-digit', second: '2-digit'
    });
  }

  // Toast Notification manager
  class ToastManager {
    constructor(container) {
      this.container = container;
      this.toasts = [];
    }
    show(message, icon = 'info', duration = 4000) {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      toast.innerHTML = `<span class="material-icons toast-icon">${icon}</span>${message}`;
      this.container.appendChild(toast);
      this.toasts.push(toast);
      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (this.container.contains(toast)) {
            this.container.removeChild(toast);
          }
          this.toasts = this.toasts.filter(t => t !== toast);
        }, 300);
      }, duration);
    }
  }

  // App State
  const state = {
    socket: null,
    connected: false,
    events: [],
    filterType: 'all',
    channel: '',
    userToken: '', // OAuth token to connect, optional, empty = anonymous
    bitsCount: 0,
    giftCount: 0,
  };

  // DOM Elements
  const ui = {
    channelInput: document.getElementById('channelName'),
    connectBtn: document.getElementById('connectBtn'),
    eventTableBody: document.getElementById('eventTableBody'),
    sidebar: document.getElementById('sidebar'),
    overlay: document.getElementById('overlay'),
    menuToggle: document.getElementById('menu-toggle'),
    themeToggle: document.getElementById('theme-toggle'),
    themeIcon: document.getElementById('theme-icon'),
    badges: {
      all: document.getElementById('badge-all'),
      bits: document.getElementById('badge-bits'),
      gift: document.getElementById('badge-gift')
    },
    exportCsvBtn: document.getElementById('exportCsvBtn'),
    openGoogleSheetModalBtn: document.getElementById('openGoogleSheetModalBtn'),
    googleSheetModal: document.getElementById('googleSheetModal'),
    gapiApiKeyInput: document.getElementById('gapiApiKey'),
    googleSheetIdInput: document.getElementById('googleSheetId'),
    cancelGoogleSheetBtn: document.getElementById('cancelGoogleSheetBtn'),
    saveGoogleSheetBtn: document.getElementById('saveGoogleSheetBtn'),
  };
  const toastMgr = new ToastManager(document.getElementById('toast-container'));

  // Validate channel input
  function validateChannelName(name) {
    // Twitch channel names are lowercase alphanumeric only, 4-25 chars
    if (typeof name !== 'string') return false;
    const n = name.trim().toLowerCase();
    return /^[a-z0-9_]{4,25}$/.test(n);
  }

  // Update connect button state
  ui.channelInput.addEventListener('input', () => {
    const val = ui.channelInput.value.trim().toLowerCase();
    ui.connectBtn.disabled = !validateChannelName(val);
  });


  // Theme toggle (dark/light)
  function setTheme(darkMode) {
    document.documentElement.style.colorScheme = darkMode ? 'dark' : 'light';
    if (darkMode) {
      document.documentElement.style.setProperty('--bg-color', '#1e1967');
    } else {
      document.documentElement.style.setProperty('--bg-color', '#f0f4ff');
    }
    ui.themeIcon.textContent = darkMode ? 'light_mode' : 'dark_mode';
    ui.themeToggle.setAttribute('aria-pressed', darkMode ? 'true' : 'false');
  }
  // Store theme preference to localStorage
  function initTheme() {
    const saved = localStorage.getItem('theme');
    const darkPreferred = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const darkMode = saved !== null ? saved === 'dark' : darkPreferred;
    setTheme(darkMode);
    ui.themeToggle.addEventListener('click', () => {
      const current = ui.themeToggle.getAttribute('aria-pressed') === 'true';
      setTheme(!current);
      localStorage.setItem('theme', !current ? 'dark' : 'light');
    });
  }

  // WebSocket IRC client for Twitch chat
  class TwitchIRC {
    constructor(channel, token = '') {
      this.channel = channel.toLowerCase();
      this.token = token; // OAuth token with format "oauth:xxxx"
      this.websocket = null;
      this.listeners = {};
      this.reconnectInterval = 5000;
      this.connected = false;
      this.nick = token ? this.getUserFromToken(token) : 'justinfan' + Math.floor(Math.random()*80000);
      this._reconnectTimer = null;
    }

    getUserFromToken(token) {
      // Cannot get username from token without client call
      // Use blank, fallback to anon.
      return 'justinfan' + Math.floor(Math.random()*80000);
    }

    connect() {
      if (this.connected) return;
      const wsUrl = 'wss://irc-ws.chat.twitch.tv:443';
      this.websocket = new WebSocket(wsUrl);
      this.websocket.addEventListener('open', () => this.onOpen());
      this.websocket.addEventListener('message', e => this.onMessage(e));
      this.websocket.addEventListener('close', e => this.onClose(e));
      this.websocket.addEventListener('error', e => this.onError(e));
    }

    disconnect() {
      if (!this.connected) return;
      this.websocket.close(1000, 'Client disconnect');
      this.connected = false;
    }

    onOpen() {
      this.connected = true;
      // Login
      const nick = this.nick;
      this.sendRaw(`PASS ${this.token || 'SCHMOOPIIE'}`);
      this.sendRaw(`NICK ${nick}`);
      // Request capabilities for tags and commands
      this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership');
      // Join channel
      this.sendRaw(`JOIN #${this.channel}`);
      this.emit('open');
    }

    onMessage(event) {
      const msg = event.data;
      // Respond to PING to keep connection alive
      if (msg.startsWith('PING')) {
        this.sendRaw('PONG :tmi.twitch.tv');
        return;
      }
      // Parse IRC message
      const parsed = this.parseIRCMessage(msg);
      if (parsed) {
        this.emit('message', parsed);
      }
    }

    onClose(event) {
      this.connected = false;
      this.emit('close', event);
      if (!event.wasClean) { // Reconnect logic
        if (!this._reconnectTimer) {
          this._reconnectTimer = setTimeout(() => {
            this._reconnectTimer = null;
            this.connect();
          }, this.reconnectInterval);
        }
      }
    }

    onError(event) {
      this.emit('error', event);
    }

    sendRaw(cmd) {
      if (this.connected && this.websocket && this.websocket.readyState === WebSocket.OPEN) {
        this.websocket.send(cmd + '\r\n');
      }
    }

    parseIRCMessage(raw) {
      // Inspired by Twitch IRC v5 format and capability tags
      // Format: @tags :prefix command params :trailing
      // Example bits cheer: @badges=...,bits=100; bits are in tags
      // Gift sub: NOTICE with msg-id=subgift etc.

      const message = {
        raw,
        tags: {},
        prefix: '',
        command: '',
        params: [],
        trailing: '',
      };

      let rest = raw;
      // If tags present, start with @tags
      if (rest.startsWith('@')) {
        const endTags = rest.indexOf(' ');
        if (endTags === -1) return null;
        const tagsStr = rest.slice(1, endTags);
        rest = rest.slice(endTags + 1);
        tagsStr.split(';').forEach(tagPair => {
          const [key, ...vals] = tagPair.split('=');
          message.tags[key] = vals.join('=') || '';
        });
      }

      // Next, prefix starting with ':'
      if (rest.startsWith(':')) {
        const endPrefix = rest.indexOf(' ');
        message.prefix = rest.slice(1, endPrefix);
        rest = rest.slice(endPrefix + 1);
      }

      // Next, command and params
      const firstSpace = rest.indexOf(' ');
      if (firstSpace === -1) {
        message.command = rest;
      } else {
        message.command = rest.slice(0, firstSpace);
        rest = rest.slice(firstSpace + 1);
        // Params can be multiple with trailing colon
        const split = [];
        let current = '';
        let trailingStarted = false;
        for(let i=0; i<rest.length; i++) {
          if (!trailingStarted) {
            if (rest[i] === ' ') {
              if (current.length > 0) {
                split.push(current);
                current = '';
              }
            } else if (rest[i] === ':' && split.length > 0) {
              trailingStarted = true;
              current = rest.slice(i+1);
              break;
            } else {
              current += rest[i];
            }
          }
        }
        if (current.length > 0) split.push(current);
        message.params = split;
        if (trailingStarted) {
          message.trailing = current;
        }
      }
      return message;
    }

    on(event, cb) {
      if (!this.listeners[event]) {
        this.listeners[event] = [];
      }
      this.listeners[event].push(cb);
    }
    off(event, cb) {
      if (!this.listeners[event]) return;
      this.listeners[event] = this.listeners[event].filter(fn => fn !== cb);
    }
    emit(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(cb => cb(data));
      }
    }
  }

  // Event Parser specific to Bits and Gifted Subs
  function parseTwitchEvent(msg) {
    // msg = parsed IRC message

    const tags = msg.tags;
    const command = msg.command;
    const params = msg.params;
    const trailing = msg.trailing;

    // Output
    let event = null;

    // Common data
    const timestamp = new Date();
    const userId = tags['user-id'] || '';
    const username = tags['login'] || '';
    const displayName = tags['display-name'] || username;

    // Handle bits cheer: PRIVMSG with bits tag
    if (command === 'PRIVMSG' && tags.bits && tags.bits !== '0') {
      const bitsAmount = parseInt(tags.bits);
      const messageText = trailing || '';
      event = {
        timestamp,
        userId,
        username,
        displayName,
        type: 'bits',
        amount: bitsAmount,
        message: messageText,
        rawTags: tags,
      };
    }

    // Handle gifted subscription: NOTICE msg-id=subgift
    else if (command === 'NOTICE' && tags['msg-id'] === 'subgift') {
      // Gifted sub info in tags
      // Fields: login (gifter), display-name, recipient user id, recipient display name, etc.
      const gifterUserId = tags['user-id'] || '';
      const gifterUsername = tags['login'] || '';
      const gifterDisplayName = tags['display-name'] || gifterUsername;
      const recipientUserId = tags['msg-param-recipient-id'] || '';
      const recipientName = tags['msg-param-recipient-display-name'] || '';
      const tier = tags['msg-param-sub-plan'] || '';
      const tierMap = {
        '1000': 'Tier 1',
        '2000': 'Tier 2',
        '3000': 'Tier 3',
      };
      const tierName = tierMap[tier] || tier;
      // Number gifted is always 1 per message, Twitch sends independent messages for multi gifts

      event = {
        timestamp,
        userId: gifterUserId,
        username: gifterUsername,
        displayName: gifterDisplayName,
        type: 'gift',
        amount: 1,
        recipientUserId,
        recipientName,
        tier: tierName,
        message: trailing || '',
        rawTags: tags,
      };
    }

    // Handle mass gifted subs: msg-id=submysterygift or subgift with param count
    else if (command === 'NOTICE' && (tags['msg-id'] === 'submysterygift' || tags['msg-id'] === 'subgift')) {
      // For submysterygift, msg-param-mass-gift-count exists
      const gifterUserId = tags['user-id'] || '';
      const gifterUsername = tags['login'] || '';
      const gifterDisplayName = tags['display-name'] || gifterUsername;
      const tier = tags['msg-param-sub-plan'] || '';
      const tierMap = {
        '1000': 'Tier 1',
        '2000': 'Tier 2',
        '3000': 'Tier 3',
      };
      const tierName = tierMap[tier] || tier;
      let count = 1;
      if (tags['msg-param-mass-gift-count']) {
        count = parseInt(tags['msg-param-mass-gift-count'], 10);
      }
      event = {
        timestamp,
        userId: gifterUserId,
        username: gifterUsername,
        displayName: gifterDisplayName,
        type: 'gift',
        amount: count,
        recipientUserId: '',
        recipientName: '',
        tier: tierName,
        message: trailing || '',
        rawTags: tags,
      };
    }

    return event;
  }

  // Render function to add event to table and update badges
  function renderEvent(event) {
    if (!event) return;

    state.events.unshift(event);
    // Limit events to last 200
    if (state.events.length > 200) {
      state.events.pop();
    }
    updateBadges();
    renderTable(state.filterType);
    if (!document.hidden) {
      toastMgr.show(renderToastMessage(event), event.type === 'bits' ? 'local_play' : 'card_giftcard');
    }
  }
  function updateBadges() {
    const allCount = state.events.length;
    const bitsCount = state.events.filter(e => e.type === 'bits').length;
    const giftCount = state.events.filter(e => e.type === 'gift').length;
    state.bitsCount = bitsCount;
    state.giftCount = giftCount;
    ui.badges.all.textContent = allCount;
    ui.badges.bits.textContent = bitsCount;
    ui.badges.gift.textContent = giftCount;
  }
  // Render table by filter type
  function renderTable(filter = 'all') {
    ui.eventTableBody.innerHTML = '';
    const filtered = state.events.filter(e => filter === 'all' || e.type === filter);
    for (const ev of filtered) {
      const tr = document.createElement('tr');
      // Time
      const timeTd = document.createElement('td');
      timeTd.textContent = formatDateTime(ev.timestamp);
      timeTd.title = ev.timestamp.toISOString();
      // User account (username)
      const userTd = document.createElement('td');
      userTd.textContent = ev.username || '';
      // Display name text only
      const displayTd = document.createElement('td');
      displayTd.textContent = ev.displayName || '';
      displayTd.className = 'user-name';

      // Type column renamed
      const typeTd = document.createElement('td');
      if (ev.type === 'bits') {
        typeTd.innerHTML = '<span class="material-icons" aria-hidden="true">local_play</span>小奇點 Cheer';
      } else if (ev.type === 'gift') {
        typeTd.innerHTML = '<span class="material-icons" aria-hidden="true">card_giftcard</span>贈送訂閱';
      } else {
        typeTd.textContent = ev.type;
      }
      // Amount
      const amtTd = document.createElement('td');
      amtTd.textContent = ev.amount.toString();

      tr.append(timeTd, userTd, displayTd, typeTd, amtTd);
      ui.eventTableBody.appendChild(tr);
    }
  }

  // Toast message content
  function renderToastMessage(ev) {
    if (!ev) return '';
    if (ev.type === 'bits') {
      return `觀眾 ${ev.displayName} 贊助了 ${ev.amount} 小奇點！`;
    } else if (ev.type === 'gift') {
      if (ev.amount > 1) {
        return `觀眾 ${ev.displayName} 贈送了 ${ev.amount} 個訂閱 (${ev.tier})！`;
      } else {
        return `觀眾 ${ev.displayName} 贈送了一個訂閱 (${ev.tier}) 給 ${ev.recipientName || '未知'}！`;
      }
    }
    return '';
  }

  // Connect button handler
  ui.connectBtn.addEventListener('click', () => {
    if (state.connected) {
      disconnectIRC();
    } else {
      const channel = ui.channelInput.value.trim().toLowerCase();
      if (!validateChannelName(channel)) {
        toastMgr.show('頻道名稱格式錯誤，請輸入有效的頻道名稱。', 'error', 6000);
        return;
      }
      connectIRC(channel);
    }
  });

  // Connect to Twitch IRC
  function connectIRC(channel) {
    if (state.connected) return;
    state.channel = channel;
    state.socket = new TwitchIRC(channel);
    state.socket.on('open', () => {
      state.connected = true;
      ui.connectBtn.textContent = '中斷連線';
      ui.connectBtn.disabled = false;
      toastMgr.show(`已連線至 Twitch 頻道：${channel}`, 'check_circle', 3000);
      clearEvents();
    });
    state.socket.on('message', msg => {
      // Parse bits and gift events
      const event = parseTwitchEvent(msg);
      if (event) {
        renderEvent(event);
      }
    });
    state.socket.on('close', () => {
      state.connected = false;
      ui.connectBtn.textContent = '連線 Twitch IRC';
      toastMgr.show('連線已斷開', 'warning', 3000);
    });
    state.socket.on('error', e => {
      toastMgr.show('連線錯誤，請稍後再試。', 'error', 6000);
      console.error('WebSocket錯誤:', e);
    });
    ui.connectBtn.disabled = true;
    state.socket.connect();
  }

  // Disconnect function
  function disconnectIRC() {
    if (state.socket) {
      state.socket.disconnect();
      state.socket = null;
      state.connected = false;
      ui.connectBtn.textContent = '連線 Twitch IRC';
      toastMgr.show('已手動斷開連線', 'info', 3000);
    }
  }

  // Clear events and update UI badges
  function clearEvents() {
    state.events = [];
    updateBadges();
    renderTable(state.filterType);
  }

  // Sidebar navigation filtering
  ui.sidebar.querySelectorAll('li').forEach(li => {
    li.addEventListener('click', () => {
      changeFilter(li.dataset.type);
      setActiveSidebarItem(li);
    });
    li.addEventListener('keydown', e => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        li.click();
      }
    });
  });
  function changeFilter(type) {
    state.filterType = type;
    renderTable(type);
  }
  function setActiveSidebarItem(activeLi) {
    ui.sidebar.querySelectorAll('li').forEach(li => {
      li.classList.remove('active');
      li.setAttribute('aria-pressed', 'false');
    });
    if (activeLi) {
      activeLi.classList.add('active');
      activeLi.setAttribute('aria-pressed', 'true');
    }
  }

  // Mobile menu toggle
  ui.menuToggle.addEventListener('click', () => {
    const isOpen = ui.sidebar.classList.contains('mobile-visible');
    if (isOpen) {
      ui.sidebar.classList.remove('mobile-visible');
      ui.overlay.classList.remove('show');
      ui.menuToggle.setAttribute('aria-expanded', 'false');
    } else {
      ui.sidebar.classList.add('mobile-visible');
      ui.overlay.classList.add('show');
      ui.menuToggle.setAttribute('aria-expanded', 'true');
    }
  });
  // Close sidebar on overlay click
  ui.overlay.addEventListener('click', () => {
    ui.sidebar.classList.remove('mobile-visible');
    ui.overlay.classList.remove('show');
    ui.menuToggle.setAttribute('aria-expanded', 'false');
  });

  // Initialize theme and badges
  initTheme();
  updateBadges();

  // Keyboard shortcuts (space: connect/disconnect)
  window.addEventListener('keydown', e => {
    if (e.key === ' ' && document.activeElement !== ui.channelInput) {
      e.preventDefault();
      ui.connectBtn.click();
    }
  });

  // Accessibility focus outline smoothing for mouse users
  function handleFirstTab(e) {
    if (e.key === 'Tab') {
      document.body.classList.add('user-is-tabbing');
      window.removeEventListener('keydown', handleFirstTab);
    }
  }
  window.addEventListener('keydown', handleFirstTab);



  // === Export CSV functionality ===
  ui.exportCsvBtn.addEventListener('click', () => {
    if (state.events.length === 0) {
      toastMgr.show('沒有可匯出的事件資料。', 'warning', 3000);
      return;
    }
    const headers = ['時間', '觀眾帳號', '顯示名稱', '類型', '數量'];
    // Build CSV content
    const rows = state.events.map(ev => [
      formatDateTime(ev.timestamp),
      ev.username,
      ev.displayName,
      ev.type === 'bits' ? '小奇點 Cheer' : ev.type === 'gift' ? '贈送訂閱' : ev.type,
      ev.amount.toString()
    ]);
    const csvContent =
      headers.join(',') + '\n' +
      rows.map(r =>
        r.map(field =>
          `"${String(field).replace(/"/g, '""')}"`
        ).join(',')
      ).join('\n');

    // Download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').slice(0,15);
    link.download = `twitch_bits_gifts_${timestamp}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toastMgr.show('CSV 檔案已準備好下載。', 'check_circle', 3000);
  });


  // === Google Sheets export modal control ===
  ui.openGoogleSheetModalBtn.addEventListener('click', () => {
    ui.googleSheetModal.style.display = 'flex';
    ui.gapiApiKeyInput.value = '';
    ui.googleSheetIdInput.value = '';
    ui.saveGoogleSheetBtn.disabled = true;
    ui.gapiApiKeyInput.focus();
  });
  ui.cancelGoogleSheetBtn.addEventListener('click', () => {
    ui.googleSheetModal.style.display = 'none';
  });

  // Enable save button only if inputs valid
  function validateGoogleSheetInputs() {
    const apiKey = ui.gapiApiKeyInput.value.trim();
    const sheetId = ui.googleSheetIdInput.value.trim();
    ui.saveGoogleSheetBtn.disabled = !(apiKey.length > 10 && sheetId.length > 10);
  }
  ui.gapiApiKeyInput.addEventListener('input', validateGoogleSheetInputs);
  ui.googleSheetIdInput.addEventListener('input', validateGoogleSheetInputs);

  // === Google Sheets API append rows function ===
  async function appendRowsToGoogleSheet(apiKey, sheetId, rows) {
    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(sheetId)}/values/A1:append?valueInputOption=USER_ENTERED&key=${encodeURIComponent(apiKey)}`;
    const body = {
      range: 'A1',
      majorDimension: 'ROWS',
      values: rows
    };
    const response = await fetch(baseUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error.message || 'Google Sheets API 呼叫失敗');
    }
    return await response.json();
  }

  // Save to Google Sheets button handler
  ui.saveGoogleSheetBtn.addEventListener('click', async () => {
    const apiKey = ui.gapiApiKeyInput.value.trim();
    const sheetId = ui.googleSheetIdInput.value.trim();
    if (state.events.length === 0) {
      toastMgr.show('目前無事件資料可匯出至 Google 試算表。', 'warning', 3000);
      return;
    }
    ui.saveGoogleSheetBtn.disabled = true;
    toastMgr.show('開始上傳資料到 Google 試算表...', 'info', 3000);
    try {
      // Prepare rows as arrays
      const rows = state.events.map(ev => [
        formatDateTime(ev.timestamp),
        ev.username,
        ev.displayName,
        ev.type === 'bits' ? '小奇點 Cheer' : ev.type === 'gift' ? '贈送訂閱' : ev.type,
        ev.amount.toString()
      ]);
      await appendRowsToGoogleSheet(apiKey, sheetId, rows);
      toastMgr.show('資料已成功匯出至 Google 試算表。', 'check_circle', 4000);
      ui.googleSheetModal.style.display = 'none';
    } catch (err) {
      toastMgr.show(`儲存失敗：${err.message}`, 'error', 5000);
    }
    ui.saveGoogleSheetBtn.disabled = false;
  });


})();
</script>
</body>
</html>
